import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { initClientSocket } from '../services/clientSocket';
import './Login.css';

const Login = () => {
  const [name, setName] = useState('');
  const [number, setNumber] = useState('');
  const [error, setError] = useState('');
  const [loading, setLoading] = useState(false);
  const navigate = useNavigate();

  const handleSubmit = (e) => {
    e.preventDefault();
    
    if (!name.trim() || !number.trim()) {
      setError('Please fill in all fields');
      return;
    }

    setLoading(true);
    setError('');

    try {
      // Initialize socket as client
      initClientSocket(
        name, 
        number,
        null, // userId will be generated by the server
        null, // message handler
        (sessionData) => {
          console.log('Session received in Login component:', sessionData);
          
          // Store user info
          localStorage.setItem('userName', name);
          localStorage.setItem('userNumber', number);
          
          if (sessionData && sessionData.client && sessionData.client.id) {
            localStorage.setItem('userId', sessionData.client.id);
          }
          
          // Navigate to chat
          navigate('/client/chat', { 
            state: { 
              userName: name,
              userNumber: number
            } 
          });
        }
      );
      
      // Set a timeout in case the session event doesn't come
      setTimeout(() => {
        if (loading) {
          // Navigate anyway after timeout
          navigate('/client/chat', { 
            state: { 
              userName: name,
              userNumber: number
            } 
          });
          setLoading(false);
        }
      }, 3000);
      
    } catch (err) {
      console.error('Error initializing socket:', err);
      setError('Failed to connect to server');
      setLoading(false);
    }
  };

  return (
    <div className="login-container">
      <div className="login-card">
        <div className="login-header">
          <h1>Welcome to Chat</h1>
          <p>Enter your details to start chatting</p>
        </div>
        
        {error && <div className="error-message">{error}</div>}
        
        <form onSubmit={handleSubmit} className="login-form">
          <div className="form-group">
            <label htmlFor="name">Name</label>
            <input
              type="text"
              id="name"
              value={name}
              onChange={(e) => setName(e.target.value)}
              placeholder="Enter your name"
              required
            />
          </div>
          
          <div className="form-group">
            <label htmlFor="number">Number</label>
            <input
              type="text"
              id="number"
              value={number}
              onChange={(e) => setNumber(e.target.value)}
              placeholder="Enter your number"
              required
            />
          </div>
          
          <button 
            type="submit" 
            className="login-btn" 
            disabled={loading}
          >
            {loading ? 'Connecting...' : 'Start Chat'}
          </button>
        </form>
        
        <div className="login-footer">
          <a href="/operator">Switch to Operator Login</a>
        </div>
      </div>
    </div>
  );
};

export default Login; 